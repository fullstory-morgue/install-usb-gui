#!/bin/bash
#
# Copyright (C) 2007 Joaquim Boura <x-un-i@sidux.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.
#-------------------------------------------------------------------
#
# given an usb pen, eg /dev/sdb, /dev/sdc we create ** one **  partiton on that 
# device make it bootable, format it with ext3
# install grub into it
# copy the message file into the grub dirs
# create directory for iso, kernel, initrd (eg sidux)
# copy the files into there.
# create the menu.lst file on it
# 
#--------------------------
function clean_exit()
{
	echo $? > /tmp/.install_fromiso_in_USB
}
#--------------------------

function usage()
{
        echo ""
        echo "$(basename $0) create an fromiso installation on a USB drive"
        echo ""
        echo "-d|--debugdebug sh code execution"
        echo "-D|--drive </dev/sdX>     name of device where to install the \"fromiso\""
        echo "-h|--help print this help"
        echo "-I|--iso <iso_file>       iso file name to be installed"
        echo "-t|--test copy everything but do not copy the iso"
        echo ""
	echo "Everything after -- will be appended to the kernel cmdline in the menu.lst"
	echo "of the ${FLL_DISTRO_NAME}USB system (extra cheatcodes)."
	echo ""
        echo "Use it at your own risk, it comes without any warranty."
        echo ""
}
#------------------------
function valid_label()
{
	# label may contain only these characters
	case "$1" in
		*[!A-Za-z0-9-_]*)
			return 1
			;;
	esac
	
	return 0
}
#------------------------
function prepare_partition()
{
	# clear the partition table
	dd if=/dev/zero of=${device} bs=1M count=16
	
	# create partition
	fdisk ${device} << EOF 2>&1 >> /dev/null

n
p
1


t
83
a
1
p
w
EOF   
	if [ "$?" -ne 0 ]; then
		echo Failed to create partition on device ${device}. STOP
		exit 1
	fi
	udevtrigger --subsystem-match=usb

	is_bootable=$(fdisk -l ${device} | awk 'BEGIN{i=0;}{if(/^\/dev.*\*/) { i++; exit}}END{print i}')

	if [ ${is_bootable} -ne 1 ]; then
		# set boot flag
		fdisk ${device} <<EOF 2>&1 >> /dev/null
a
1
p
w
EOF

	if [ "$?" -ne 0 ]; then
		echo Failed to make partition bootable on device ${device}. STOP
		exit 2
	fi
	udevtrigger --subsystem-match=usb

	is_bootable=$(fdisk -l ${device} | awk 'BEGIN{i=0;}{if(/^\/dev.*\*/) { i++; exit}}END{print i}')

	if [ ${is_bootable} -ne 1 ]; then
		echo Could not make USB device bootable. STOP.
		exit 3
	fi

	fs_type=$(fdisk -l ${device}  | \
		awk 'BEGIN{fstype=0}{if(/^\/dev.*\*/) { fstype=$6}}END{print fstype}')
	if [ "${fs_type}" != 83 ]; then
		# set partition type
		fdisk ${device} <<EOF 2>&1 >> /dev/null
t
83
p
w
EOF
	if [ "$?" -ne 0 ]; then
		echo Failed to set partition type on device ${device}. STOP
		exit 4
	fi
		udevtrigger --subsystem-match=usb

		fs_type=$(fdisk -l ${device}  | \
			awk 'BEGIN{fstype=0}{if(/^\/dev.*\*/) { fstype=$6}}END{print fstype}')

		if [ "${fs_type}" != 83 ]; then
			echo Could not set the right partition type on the USB device. STOP.
			exit 5
		fi	
	fi	

	# now create the filesystem in it.
	if [ "${label}" ] && ! valid_label "${label}"; then
		echo "WARNING: you gave an invalid label: ${label}"
		echo "Use only characters in the rage of [A-Za-z0-9-_]"
		echo "...and no spaces!"
		unset label
	fi
	
	# append a pseudorandom string of numbers to help avoid
	# having a volume label conflict
	label=${label:-"${FLL_DISTRO_NAME}USB"}

	mkfs.ext3 -q -m 1 -L ${label} ${partition}
	if [ $? -ne 0 ]; then
		echo Error formating the USB device. STOP.
		exit 6
	fi
	udevtrigger --subsystem-match=usb

}
#----------------------
function install_grub()
{
	local device_map

	echo "Installing grub"

	grub-install --recheck --no-floppy --root-directory=${TEMPDIR}  ${device}

	device_map=${TEMPDIR}/boot/grub/device.map
	disk=$(echo ${device}|cut -d '/' -f 3)

	old_hdmap=$(grep ${disk} ${device_map}|awk '{print $1}' | sed -e "s/[\(,\)]//g")

	# fix the device.map file
	sed -i -e "s|(hd0)|(hdX)|" -e "s|(${old_hdmap})|(hd0)|" \
		-e "s|(hdX)|(${old_hdmap})|" ${device_map}

}
#------------------------------
function copy_files_from_dev()
{
	local booted_device fll_booted_dir
	
	echo "Copying files"
	booted_device=$(mount | awk '{if (/iso9660/ && /\/fll/ && /\/dev\//) print $1}')
	fll_booted_dir=$(mount | awk '{if (/iso9660/ && /\/fll/ && /\/dev\//) print $3}')

	cp 	${fll_booted_dir}/boot/message \
		${fll_booted_dir}/boot/initrd* \
		${fll_booted_dir}/boot/vmlinuz* \
			${TEMPDIR}/boot

	if [ -z "${nocopy}" -o "${nocopy}" != "yes" ]; then
		dd if=${booted_device} of=${TEMPDIR}/${FLL_MEDIA_NAME}
	fi
}
#-----------------------------------
function copy_files_from_local_iso()
{
	local mounted_iso 
	
	echo "Copying files"

	mounted_iso="$(mktemp -dp /tmp/ iso-XXXXXXXXXX)"

	if ! mount -t iso9660 -o loop,ro ${iso} ${mounted_iso} ; then
		echo "Could not mount the iso file. STOP."	
		exit 7
	fi
	
	cp 	${fll_booted_dir}/boot/message \
			${TEMPDIR}/boot
	cp	${mounted_iso}/boot/initrd* \
		${mounted_iso}/boot/vmlinuz* \
			${TEMPDIR}/boot

	umount ${mounted_iso}
	rmdir ${mounted_iso}

	if [ -z "${nocopy}" -o "${nocopy}" != "yes" ]; then
 		cp ${iso} ${TEMPDIR}/${FLL_MEDIA_NAME}
	fi
}
#------------------------
function create_menu_list()
{
	local initrd vmlinuz

	echo "Creating menu.lst"
	initrd=$(echo ${TEMPDIR}/boot/initrd.img-* | sed -e "s|^.*/||")
	vmlinuz=$(echo ${TEMPDIR}/boot/vmlinuz-* | sed -e "s|^.*/||")

	cat <<EOF > ${TEMPDIR}/boot/grub/menu.lst
default 0
timeout 10
color red/black light-red/black
foreground EE0000
background 400000
gfxmenu /boot/message


##ISO boot
title ${FLL_DISTRO_NAME} from ISO
kernel (hd0,0)/boot/${vmlinuz} boot=fll fromhd=LABEL=${label} fromiso quiet vga=791 ${@}
initrd (hd0,0)/boot/${initrd}

EOF

}

#--------------------------------------------------------------
# preparation
#--------------------------------------------------------------

TEMP=`getopt -o dD:I:hL:pt \
        --long debug,drive:,iso:,help,label:,persist,test \
        -n  "$(basename $0)" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 99; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-d|--debug)
			set -x
			shift
			;;
		-D|--drive)
			device="$2"
			shift 2
			;;
		-I|--iso)
			iso="$2"
			shift 2
			;;
		-h|--help)
			usage
			exit 0
			;;
		-L|--label)
			label="$2"
			shift 2
			;;
		-p|--persist)
			persist="persist"
			shift
			;;
		-t|--test)
			nocopy="yes"
			shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal error!"
			exit 255
			;;
	esac
done

#--------------------------------------------------------------
trap clean_exit exit

#--------------------------------------------------------------
if [ -s /etc/default/distro ]; then
	source /etc/default/distro
else
	echo "Requires distro-defaults, aborting..."
	exit 1
fi

TEMPDIR="$(mktemp -dp /tmp/ install-usb.XXXXX)"

if ! stat ${device} 2>&1>/dev/null ; then 
	echo device "${device}" not found; 
	exit 8 
fi

partition=${device}1

if [ "${FLL_DISTRO_MODE}" = "installed" ]; then
	if [ -z "${iso}" -o ! -r "${iso}" ]; then
		echo can not read the iso ${iso} file
		exit 9
	fi
fi

echo "preparing..."
prepare_partition

mount ${partition} ${TEMPDIR}

echo "install grub..."
install_grub

echo "copy files..."
if [ "${FLL_DISTRO_MODE}" = "installed" ] || \
	grep -s -q -w toram /proc/cmdline; then
	copy_files_from_local_iso 
else
	copy_files_from_dev
fi

create_menu_list ${@}

umount ${partition}

rmdir ${TEMPDIR}
echo "done"

exit 0

